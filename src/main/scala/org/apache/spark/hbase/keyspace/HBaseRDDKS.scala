package org.apache.spark.hbase.keyspace

import org.apache.hadoop.hbase.client._
import org.apache.hadoop.hbase.filter.FuzzyRowFilter
import org.apache.spark.SparkContext
import org.apache.spark.hbase.keyspace.KeySpaceRegistry.KSREG
import org.apache.spark.hbase.{HBaseQuery, HBaseFilter, HBaseRDD}

import scala.collection.JavaConverters._


/**
 * Created by mharis on 10/07/15.
 *
 * HBaseRDDKS is an HBaseRDD[(Key, hbase.client.Result)] - Key is defined only in the scope of this special package
 * and its purpose is to allow mixing different key types in the same table and preserve even distribution across regions.
 *
 * In any Key instance, the first 4 bytes are salt for the key generated by the particular KeySpace to
 * which the Key belongs and the following 2 bytes are the signature of the KeySpace. With this representation it
 *
 * is possible to ensure that:
 * 1) any type of key can be "made" to be distributed evenly
 * 2) different key types can be mixed in a single hbase table (but don't have to be - depends on application)
 * 3) fuzzy row filter can be applied on the 2-byte key space signature to fast forward on hbase server-side
 *
 * columns is a sequence of string identifiers which can either reference a column family, e.g. 'N' or a specific
 * column, e.g. 'F:propensity'
 */
abstract class HBaseRDDKS[V](sc: SparkContext, tableNameAsString: String, keySpace: Short)(implicit reg: KSREG)
  extends HBaseRDD[Key, V](sc, tableNameAsString, Seq(new HBaseFilter() {
      override def configureQuery(query: HBaseQuery): Unit = {
        val fuzzyRowfilter = new org.apache.hadoop.hbase.util.Pair(
          KeySpace(keySpace)(reg).allocate(0),
          Array[Byte](1, 1, 1, 1, 0, 0))
        query.setFilter(new FuzzyRowFilter(List(fuzzyRowfilter).asJava))
      }
    })) {

  def this(sc: SparkContext, tableNameAsString: String)(implicit reg: KSREG) = this(sc, tableNameAsString, (-1.toShort))

  override def bytesToKey = (rowKey: Array[Byte]) => Key(rowKey)

  override def keyToBytes = (key: Key) => key.bytes

}
